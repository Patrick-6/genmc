/*
 * GenMC -- Generic Model Checking.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you can access it online at
 * http://www.gnu.org/licenses/gpl-3.0.html.
 *
 * Author: Michalis Kokologiannakis <michalis@mpi-sws.org>
 */

/*** NOTE: No include guard ***/
#ifndef FIRST_LABEL
#define FIRST_LABEL(name, arg)
#endif
#ifndef LAST_LABEL
#define LAST_LABEL(name, arg)
#endif
#ifndef HANDLE_LABEL
#define HANDLE_LABEL(name)
#endif

/*
 * Begin labels - these denote the start of a given thread.
 * A start might be the initial label (for main) or a start event (for others).
 * Every thread has to have such a label.
 */
FIRST_LABEL(ThreadStart, ThreadStart)
HANDLE_LABEL(ThreadStart)
HANDLE_LABEL(Init)
LAST_LABEL(ThreadStart, Init)

/*
 * Terminator labels - these denote the termination of a thread.
 * A termination might be a block label (denoting blockage), a kill label
 * (denoting the reach of unrolling bound), or a finish label (normal termination).
 * Block labels have different types, depending on the blockage.
 */
FIRST_LABEL(Terminator, SpinloopBlock)
FIRST_LABEL(Block, SpinloopBlock)
HANDLE_LABEL(SpinloopBlock)
HANDLE_LABEL(FaiZNEBlock)
HANDLE_LABEL(LockZNEBlock)
HANDLE_LABEL(HelpedCASBlock)
HANDLE_LABEL(ConfirmationBlock)
HANDLE_LABEL(LockNotAcqBlock)
HANDLE_LABEL(LockNotRelBlock)
HANDLE_LABEL(BarrierBlock)
HANDLE_LABEL(ErrorBlock)
HANDLE_LABEL(UserBlock)
HANDLE_LABEL(JoinBlock)
HANDLE_LABEL(ReadOptBlock)
LAST_LABEL(Block, ReadOptBlock)

HANDLE_LABEL(ThreadKill)
HANDLE_LABEL(ThreadFinish)
LAST_LABEL(Terminator, ThreadFinish)

/*
 * Memory labels - these denote memory accesses.
 * They are further divided into read and write labels,
 * which in turn might be either plain, CAS or FAI.
 */
FIRST_LABEL(MemAccess, Read)
FIRST_LABEL(Read, Read)
HANDLE_LABEL(Read)

HANDLE_LABEL(BWaitRead)
HANDLE_LABEL(SpeculativeRead)
HANDLE_LABEL(ConfirmingRead)
HANDLE_LABEL(CondVarWaitRead)

HANDLE_LABEL(CasRead)
FIRST_LABEL(CasRead, CasRead)

FIRST_LABEL(LockCasRead, LockCasRead)
HANDLE_LABEL(LockCasRead)
HANDLE_LABEL(AbstractLockCasRead)
LAST_LABEL(LockCasRead, AbstractLockCasRead)

HANDLE_LABEL(TrylockCasRead)
HANDLE_LABEL(HelpedCasRead)
HANDLE_LABEL(ConfirmingCasRead)
LAST_LABEL(CasRead, ConfirmingCasRead)

FIRST_LABEL(FaiRead, FaiRead)
HANDLE_LABEL(FaiRead)
HANDLE_LABEL(NoRetFaiRead)
HANDLE_LABEL(BIncFaiRead)
LAST_LABEL(FaiRead, BIncFaiRead)
LAST_LABEL(Read, BIncFaiRead)


FIRST_LABEL(Write, Write)
HANDLE_LABEL(Write)

HANDLE_LABEL(BInitWrite)
HANDLE_LABEL(BDestroyWrite)
HANDLE_LABEL(CondVarInitWrite)
HANDLE_LABEL(CondVarSignalWrite)
HANDLE_LABEL(CondVarBcastWrite)
HANDLE_LABEL(CondVarDestroyWrite)

FIRST_LABEL(UnlockWrite, UnlockWrite)
HANDLE_LABEL(UnlockWrite)
HANDLE_LABEL(AbstractUnlockWrite)
LAST_LABEL(UnlockWrite, AbstractUnlockWrite)

FIRST_LABEL(CasWrite, CasWrite)
HANDLE_LABEL(CasWrite)

FIRST_LABEL(LockCasWrite, LockCasWrite)
HANDLE_LABEL(LockCasWrite)
HANDLE_LABEL(AbstractLockCasWrite)
LAST_LABEL(LockCasWrite, AbstractLockCasWrite)

HANDLE_LABEL(TrylockCasWrite)
HANDLE_LABEL(HelpedCasWrite)
HANDLE_LABEL(ConfirmingCasWrite)
LAST_LABEL(CasWrite, ConfirmingCasWrite)

FIRST_LABEL(FaiWrite, FaiWrite)
HANDLE_LABEL(FaiWrite)
HANDLE_LABEL(NoRetFaiWrite)
HANDLE_LABEL(BIncFaiWrite)
LAST_LABEL(FaiWrite, BIncFaiWrite)
LAST_LABEL(Write, BIncFaiWrite)
LAST_LABEL(MemAccess, BIncFaiWrite)

/*
 * Fence labels - these represent a memory fence.
 */
FIRST_LABEL(Fence, Fence)
HANDLE_LABEL(Fence)
LAST_LABEL(Fence, Fence)

/*
 * Alloc labels - these represent memory allocation.
 */
FIRST_LABEL(Malloc, Malloc)
HANDLE_LABEL(Malloc)
LAST_LABEL(Malloc, Malloc)

/*
 * Free labels - these represent memory deallocation.
 */
FIRST_LABEL(Free, Free)
HANDLE_LABEL(Free)
HANDLE_LABEL(HpRetire)
LAST_LABEL(Free, HpRetire)

/*
 * Other labels - other operations that GenMC needs to track.
 */
FIRST_LABEL(Other, ThreadCreate)
HANDLE_LABEL(ThreadCreate)
HANDLE_LABEL(ThreadJoin)
HANDLE_LABEL(HpProtect)
HANDLE_LABEL(HelpingCas)
HANDLE_LABEL(Optional)
HANDLE_LABEL(LoopBegin)
HANDLE_LABEL(SpinStart)
HANDLE_LABEL(FaiZNESpinEnd)
HANDLE_LABEL(LockZNESpinEnd)
HANDLE_LABEL(Empty)
HANDLE_LABEL(MethodBegin)
HANDLE_LABEL(MethodEnd)
LAST_LABEL(Other, MethodEnd)

#undef FIRST_LABEL
#undef LAST_LABEL
#undef HANDLE_LABEL
