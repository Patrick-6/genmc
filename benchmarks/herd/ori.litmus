C ori

{ [x] = 0; [y] = 0; [zero] = 0; }

P0 (atomic_int *x, atomic_int *y)
{
	int r1 = atomic_fetch_add_explicit(x, 1, memory_order_relaxed);
	atomic_store_explicit(y, 1, memory_order_release);
}

P1 (atomic_int *x, volatile int *zero)
{
	int r1 = atomic_compare_exchange_strong_explicit(x, zero, 1, memory_order_acquire,
		 				   	    	     memory_order_acquire);
}

P2 (atomic_int *x, atomic_int *y)
{
	int r1 = atomic_load_explicit(y, memory_order_relaxed);
	if (r1) {
		 atomic_store_explicit(x, 4, memory_order_release);
	}
}