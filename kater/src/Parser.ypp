%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.2"

// %define api.token.raw
%define api.token.constructor
%define api.token.prefix {TOK_}
%define api.value.type variant
%define parse.assert
%define parse.trace
// %define parse.error detailed
%define parse.error verbose
// %define parse.lac full
%locations

%code requires {
  #include <string>
  #include "RegExp.hpp"
  class Driver;
}

%param { Driver& drv }

%code {
  #include <iostream>
  #include <memory>
  #include <unordered_map>
  #include <vector>
  #include "RegExp.hpp"
  #include "Driver.hpp"
}


%token
  ACYCLIC  "acyclic"
  LET	   "let"
  PROPERTY "property"
  REDUCE   "reduce"
  SAVE     "save"
  ZERO     "0"
  EQ       "="
  SEMI     ";"
  ALT      "|"
  PLUS     "+"
  STAR     "*"
  QMARK    "?"
  LPAREN   "("
  RPAREN   ")"
  LBRACK   "["
  RBRACK   "]"
;

%token YYEOF 0

%token <std::string> ID;
%nterm <std::unique_ptr<RegExp>> rel;

%left  "|"
%left  ";"
%precedence "+" "*" "?"

%printer { yyo << *($$); } <std::unique_ptr<RegExp>>;
%printer { yyo << $$; } <*>;

%start main
%%

main:	  %empty		{ }
	| main decl		{ }
        ;

decl:	  "let" ID "=" rel		{ drv.registerID($2, std::move($4)); }
	| "property" rel "=" "0" 	{ drv.register_emptiness_assumption(RegExp::optimize(std::move($2))); }
	| "acyclic" rel 		{ drv.addAcyclicityConstraint(std::move($2)); }
	| "save" ID "=" "reduce" rel 	{ drv.registerSaveReducedID($2, std::move($5)); }
	| "save" ID "=" rel 		{ drv.registerSaveID($2, std::move($4)); }
	;

rel:	  "(" rel ")"		{ $$ = std::move($2); }
	| "[" rel "]"		{ $2->bracket(); $$ = std::move($2); }
	| rel "|" rel		{ $$ = AltRE::create(std::move($1), std::move($3)); }
	| rel ";" rel		{ $$ = SeqRE::createOrChar(std::move($1), std::move($3)); }
	| rel "*"		{ $$ = StarRE::create(std::move($1)); }
	| rel "+"		{ $$ = PlusRE::create(std::move($1)); }
	| rel "?"		{ $$ = QMarkRE::create(std::move($1)); }
	| ID			{ $$ = drv.createIDOrGetRegistered($1); }
	;

%%

void yy::parser::error (const location_type& l, const std::string& m)
{
	std::cerr << "\n" << l << ": " << m << "\n";
}
