%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.2"

// %define api.token.raw
%define api.token.constructor
%define api.token.prefix {TOK_}
%define api.value.type variant
%define parse.assert
%define parse.trace
// %define parse.error detailed
%define parse.error verbose
// %define parse.lac full
%locations

%code requires {
  #include <string>
  #include "Constraint.hpp"
  class Driver;
}

%param { Driver& drv }

%code {
  #include "RegExp.hpp"
  #include "Driver.hpp"
  #include <iostream>
  #include <memory>
  #include <unordered_map>
  #include <vector>
}


%token
  ACYCLIC   "acyclic"
  ASSUME    "assume"
  ASSERT    "assert"
  CHECK     "check"
  COHERENCE "coherence"
  EMPTY	    "empty"
  ERROR	    "error"
  LET	    "let"
  REDUCE    "reduce"
  SAVE      "save"
  UNLESS    "unless"
  WARNING   "warning"
  ZERO      "0"
  MONE      "-1"
  EQ        "="
  LEQ       "<="
  SEMI      ";"
  ALT       "|"
  BSLASH    "\\"
  PLUS      "+"
  STAR      "*"
  QMARK     "?"
  LPAREN    "("
  RPAREN    ")"
  LBRACK    "["
  RBRACK    "]"
  SUPER     "^"
;

%token YYEOF 0

%token <std::string> ID;
%nterm <std::unique_ptr<RegExp>> rel;
%nterm <std::unique_ptr<Constraint>> constraint;

%precedence "=" "<="
%left  "|"
%left  "\\"
%left  ";"
%precedence "+" "*" "?" "^"

%printer { yyo << *($$); } <std::unique_ptr<RegExp>>;
%printer { yyo << *($$); } <std::unique_ptr<Constraint>>;
%printer { yyo << $$; } <*>;

%start main
%%

main:	  %empty		{ }
	| main decl		{ }
        ;

decl:	  "let" ID "=" rel		{ drv.registerID($2, std::move($4)); }
	| "save" ID "=" "reduce" rel 	{ drv.registerSaveReducedID($2, std::move($5)); }
	| "save" ID "=" rel 		{ drv.registerSaveID($2, std::move($4)); }
	| "assume" constraint		{ drv.registerAssume(std::move($2), @$); }
	| "assert" constraint		{ /* TODO */ }
	| "check" constraint		{ drv.addConstraint(std::move($2), @$); }
	| constraint			{ drv.addConstraint(std::move($1), @$); }
	| "error" ID "unless" constraint	{ /* TODO */ }
	| "warning" ID "unless" constraint	{ /* TODO */ }
	;

constraint:
	  rel "=" rel		{ $$ = EqualityConstraint::create(std::move($1), std::move($3)); }
	| rel "<=" rel		{ $$ = SubsetConstraint::create(std::move($1), std::move($3)); }
	| "empty" rel		{ $$ = EmptyConstraint::create(std::move($2)); }
	| "acyclic" rel		{ $$ = AcyclicConstraint::create(std::move($2)); }
	| "coherence" rel	{ $$ = AcyclicConstraint::create(std::move($2)); }
	;

rel:	  "(" rel ")"		{ $$ = std::move($2); }
	| "[" rel "]"		{ $$ = std::move($2); /* bracket is a NOP for now */ }
	| "0"			{ $$ = AltRE::create(); }
	| rel "|" rel		{ $$ = AltRE::createOpt(std::move($1), std::move($3)); }
	| rel ";" rel		{ $$ = SeqRE::createOpt(std::move($1), std::move($3)); }
	| rel "\\" rel		{ $$ = MinusRE::create(std::move($1), std::move($3)); }
	| rel "*"		{ $$ = StarRE::create(std::move($1)); }
	| rel "+"		{ $$ = PlusRE::create(std::move($1)); }
	| rel "?"		{ $$ = QMarkRE::create(std::move($1)); }
	| rel "^" "-1" 		{ $$ = InvRE::create(std::move($1)); }
	| rel "^" "=" 		{ $$ = SymRE_create(std::move($1)); }
	| ID			{ $$ = drv.getRegisteredID($1, @$); }
	;

%%

void yy::parser::error (const location_type& l, const std::string& m)
{
	std::cerr << "\n" << l << ": " << m << "\n";
}
