%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.2"

// %define api.token.raw
%define api.token.constructor
%define api.token.prefix {TOK_}
%define api.value.type variant
%define parse.assert
%define parse.trace
// %define parse.error detailed
%define parse.error custom
// %define parse.lac full
%locations

%code requires {
  #include <string>
  #include "Constraint.hpp"
  class ParsingDriver;
  extern char *current_line;
  extern void reset_current_line();
}

%param { ParsingDriver& drv }

%code {
  #include "RegExp.hpp"
  #include "ParsingDriver.hpp"
  #include <iostream>
  #include <memory>
  #include <unordered_map>
  #include <vector>
}


%token
  ACYCLIC   "acyclic"
  ASSUME    "assume"
  ASSERT    "assert"
  CHECK     "check"
  COHERENCE "coherence"
  EMPTY	    "empty"
  ERROR	    "error"
  IF        "if"
  INCLUDE   "include"
  LET	    "let"
  RECOVERY  "recovery"
  ROT       "rot"
  SAVE      "save"
  VIEW      "view"
  UNLESS    "unless"
  WARNING   "warning"
  ZERO      "0"
  MONE      "-1"
  EQ        "="
  LEQ       "<="
  SEMI      ";"
  ALT       "|"
  BSLASH    "\\"
  PLUS      "+"
  STAR      "*"
  QMARK     "?"
  LPAREN    "("
  RPAREN    ")"
  LBRACK    "["
  RBRACK    "]"
  SUPER     "^"
;

%token YYEOF 0

%token <std::string> ID;
%token <std::string> QPATH;
%nterm <std::unique_ptr<RegExp>> rel;
%nterm <std::unique_ptr<Constraint>> constraint;
%nterm <std::string> reduce_opt;
%nterm <std::unique_ptr<Constraint>> if_opt;

%precedence "=" "<="
%left  "|"
%left  "\\"
%left  ";"
%precedence "+" "*" "?" "^"

%printer { yyo << *($$); } <std::unique_ptr<RegExp>>;
%printer { yyo << *($$); } <std::unique_ptr<Constraint>>;
%printer { yyo << $$; } <*>;

%start main
%%

main:	  %empty		{ }
	| main decl		{ }
        ;

decl:     "include" QPATH                  { drv.parse($2.substr(1, $2.size()-2)); }
	| "let" ID "=" rel		   { drv.registerID($2, std::move($4)); }
	| "save" reduce_opt ID "=" rel	   { drv.registerSaveID($3, $2, std::move($5), @$); }
	| "view" ID "=" rel		   { drv.registerViewID($2, std::move($4)); }
	| "assume" constraint  		   { drv.registerAssume(std::move($2), @$); }
	| "assert" constraint if_opt	   { drv.registerAssert(std::move($2), @$, std::move($3)); }
	| "check" constraint		   { $2->setType(Constraint::Type::Consistency);
	 				     drv.addConstraint(std::move($2), "", @$); }
	| constraint			   { drv.addConstraint(std::move($1), "", @$); }
	| "error" ID "unless" constraint   { $4->setType(Constraint::Type::Error);
	 				     drv.addConstraint(std::move($4), $2, @$); }
	| "warning" ID "unless" constraint { $4->setType(Constraint::Type::Warning);
					     drv.addConstraint(std::move($4), $2, @$); }
	;

reduce_opt: %empty	{ $$ = ""; }
	| "[" ID "]"	{ $$ = $2; }
	;

if_opt: %empty 		  { $$ = nullptr; }
	| "if" constraint { $$ = std::move($2); }
	;

constraint:
	  rel "=" rel		{ $$ = EqualityConstraint::createOpt(std::move($1), std::move($3)); }
	| rel "<=" rel		{ $$ = SubsetConstraint::createOpt(std::move($1), std::move($3)); }
	| "empty" rel		{ $$ = Constraint::createEmpty(std::move($2)); }
	| "acyclic" rel		{ $$ = AcyclicConstraint::createOpt(std::move($2)); }
	| "recovery" rel	{ $$ = RecoveryConstraint::create(std::move($2)); }
	| "coherence" rel	{ $$ = CoherenceConstraint::create(std::move($2)); }
	;

rel:	  "(" rel ")"		{ $$ = std::move($2); }
	| "[" rel "]"		{ $$ = std::move($2); /* bracket is a NOP for now */ }
	| "0"			{ $$ = RegExp::createFalse(); }
	| rel "|" rel		{ $$ = AltRE::createOpt(std::move($1), std::move($3)); }
	| rel ";" rel		{ $$ = SeqRE::createOpt(std::move($1), std::move($3)); }
	| rel "\\" rel		{ $$ = MinusRE::create(std::move($1), std::move($3)); }
	| rel "*"		{ $$ = StarRE::createOpt(std::move($1)); }
	| rel "+"		{ $$ = PlusRE::createOpt(std::move($1)); }
	| rel "?"		{ $$ = QMarkRE::createOpt(std::move($1)); }
	| "rot" rel		{ $$ = RotRE::createOpt(std::move($2)); }
	| rel "^" "-1" 		{ $1->flip(); $$ = std::move($1); }
	| rel "^" "=" 		{ $$ = RegExp::createSym(std::move($1)); }
	| ID			{ $$ = drv.getRegisteredID($1, @$); }
	;

%%

void yy::parser::error(const location_type &l, const std::string &m)
{
	std::cerr << "\n" << l << ": " << m << "\n";
}

void yy::parser::report_syntax_error(const yy::parser::context &ctx) const
{
	std::cerr << ctx.location() << ": error";

	/* Report expected tokens */
	{
		enum { TOKENMAX = 5 };
		symbol_kind_type expected[TOKENMAX];

		auto n = ctx.expected_tokens(expected, TOKENMAX);
		for (auto i = 0; i < n; i++)
			std::cerr << (i == 0 ? ": expected \'" : "\' or \'") << symbol_name(expected[i]);
		if (n > 0)
			std::cerr << "\'";
	}

	/* Report the unexpected token */
	{
		auto lookahead = ctx.token();
		if (lookahead != symbol_kind::S_YYEMPTY)
			std::cerr << " before \'" << symbol_name (lookahead) << "\'";
	}

	std::cerr << '\n';

	/* Quote the source line */
	{
		auto &loc = ctx.location();
		std::cerr << current_line;
		for (auto i = 0; i < loc.begin.column-1; i++)
			std::cerr << " ";
		std::cerr << "^";
		for (auto i = loc.begin.column+1; i < loc.end.column; i++)
			std::cerr << "~";
		std::cerr << "\n";
		reset_current_line();
	}
}
